Detailed Explanation of Pointer Scenarios with Arrays
1. Pointer to an Array

A pointer to an array stores the address of the first element of the array. You can use the pointer to traverse the array elements.
Declaration:

int arr[5] = {1, 2, 3, 4, 5};
int *p = arr;  // Pointer to the first element of the array
printf("%d\n", *p);        // Access the first element
printf("%d\n", *(p + 1));  // Access the second element

Key Points:

p points to the first element of arr.
The array name itself acts as a pointer to the first element.
This pointer can be used to iterate or modify array elements.

2. Pointer to a Constant Array

A pointer to a constant array ensures that the array elements cannot be modified through the pointer, even though the array itself may not be declared const.
Declaration:

const int arr[5] = {1, 2, 3, 4, 5};
const int *p = arr;  // Pointer to a constant array
printf("%d\n", *p);        // Access the first element
// *p = 10;  // Error: modification not allowed
Key Points:

The array elements are read-only when accessed through the pointer.
Useful when passing an array to a function that should not modify its elements.

3. Constant Pointer to an Array

A constant pointer to an array means that the pointer itself cannot point to another array or memory location after initialization. However, the contents of the array it points to can be modified.
Declaration:

int arr[5] = {1, 2, 3, 4, 5};
int *const p = arr;  // Constant pointer to an array
*p = 10;       // Modifying the first element is allowed
// p = arr + 1;  // Error: cannot change the address stored in p

Key Points:
The pointer p is constant and cannot be reassigned.
The array elements can be modified via the pointer.

4. Constant Pointer to a Constant Array

A constant pointer to a constant array ensures that neither the pointer itself can point to a different location nor the elements of the array can be modified.
Declaration:


const int arr[5] = {1, 2, 3, 4, 5};
const int *const p = arr;  // Constant pointer to a constant array


printf("%d\n", *p);        // Access the first element
// *p = 10;  // Error: modification not allowed
// p = arr + 1;  // Error: pointer reassignment not allowed
Key Points:

The pointer is constant and cannot be reassigned.
The array elements are read-only when accessed via the pointer.
Provides the highest level of immutability.

Summary Table
Scenario	                        Pointer Modifiable?	    Array Elements Modifiable?
Pointer to an Array	                    Yes	                        Yes
Pointer to a Constant Array             Yes	                        No
Constant Pointer to an Array            No	                        Yes
Constant Pointer to a Constant Array	No                      	No




